// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: sellers.sql

package sqlc

import (
	"context"
)

const createSeller = `-- name: CreateSeller :one
INSERT INTO sellers (
  seller_name, bank_account
) VALUES (
  $1, $2
)
RETURNING id, seller_name, bank_account
`

type CreateSellerParams struct {
	SellerName  string `json:"seller_name"`
	BankAccount string `json:"bank_account"`
}

func (q *Queries) CreateSeller(ctx context.Context, arg CreateSellerParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, createSeller, arg.SellerName, arg.BankAccount)
	var i Seller
	err := row.Scan(&i.ID, &i.SellerName, &i.BankAccount)
	return i, err
}

const deleteSeller = `-- name: DeleteSeller :exec
DELETE FROM sellers
WHERE id = $1
`

func (q *Queries) DeleteSeller(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeller, id)
	return err
}

const getSeller = `-- name: GetSeller :one
SELECT id, seller_name, bank_account FROM sellers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSeller(ctx context.Context, id int64) (Seller, error) {
	row := q.db.QueryRowContext(ctx, getSeller, id)
	var i Seller
	err := row.Scan(&i.ID, &i.SellerName, &i.BankAccount)
	return i, err
}
