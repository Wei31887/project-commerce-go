// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: product_categories.sql

package sqlc

import (
	"context"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (
  name, sort
) VALUES (
  $1, $2
) RETURNING id, name, sort
`

type CreateProductCategoryParams struct {
	Name string `json:"name"`
	Sort int32  `json:"sort"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, createProductCategory, arg.Name, arg.Sort)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name, &i.Sort)
	return i, err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM product_categories
WHERE id = $1
`

func (q *Queries) DeleteProductCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductCategory, id)
	return err
}

const getProductCategory = `-- name: GetProductCategory :one
SELECT id, name, sort FROM product_categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductCategory(ctx context.Context, id int64) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategory, id)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name, &i.Sort)
	return i, err
}

const listAllProductCategory = `-- name: ListAllProductCategory :many
SELECT id, name, sort FROM product_categories
ORDER BY id
`

func (q *Queries) ListAllProductCategory(ctx context.Context) ([]ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, listAllProductCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(&i.ID, &i.Name, &i.Sort); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductCategory = `-- name: ListProductCategory :many
SELECT id, name, sort FROM product_categories
WHERE id = $1
ORDER BY id
`

func (q *Queries) ListProductCategory(ctx context.Context, categoryID int64) ([]ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, listProductCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(&i.ID, &i.Name, &i.Sort); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategory = `-- name: UpdateProductCategory :one
UPDATE product_categories SET 
    name = $2, sort = $3
WHERE id = $1
RETURNING id, name, sort
`

type UpdateProductCategoryParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Sort int32  `json:"sort"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, updateProductCategory, arg.ID, arg.Name, arg.Sort)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name, &i.Sort)
	return i, err
}
