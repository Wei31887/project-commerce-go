// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: product_rates.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProductRate = `-- name: CreateProductRate :one
INSERT INTO product_rates (
  user_id, product_id, rate
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, product_id, rate
`

type CreateProductRateParams struct {
	UserID    sql.NullInt64 `json:"user_id"`
	ProductID sql.NullInt64 `json:"product_id"`
	Rate      int16         `json:"rate"`
}

func (q *Queries) CreateProductRate(ctx context.Context, arg CreateProductRateParams) (ProductRate, error) {
	row := q.db.QueryRowContext(ctx, createProductRate, arg.UserID, arg.ProductID, arg.Rate)
	var i ProductRate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Rate,
	)
	return i, err
}

const deleteProductRate = `-- name: DeleteProductRate :exec
DELETE FROM product_rates
WHERE id = $1
`

func (q *Queries) DeleteProductRate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductRate, id)
	return err
}

const getProductRateByProductId = `-- name: GetProductRateByProductId :one
SELECT id, user_id, product_id, rate FROM product_rates
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetProductRateByProductId(ctx context.Context, productID sql.NullInt64) (ProductRate, error) {
	row := q.db.QueryRowContext(ctx, getProductRateByProductId, productID)
	var i ProductRate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Rate,
	)
	return i, err
}

const getProductRateByUserId = `-- name: GetProductRateByUserId :one
SELECT id, user_id, product_id, rate FROM product_rates
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetProductRateByUserId(ctx context.Context, userID sql.NullInt64) (ProductRate, error) {
	row := q.db.QueryRowContext(ctx, getProductRateByUserId, userID)
	var i ProductRate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Rate,
	)
	return i, err
}

const updateProductRateByUserId = `-- name: UpdateProductRateByUserId :one
UPDATE product_rates SET 
    rate = $2
WHERE user_id = $1
RETURNING id, user_id, product_id, rate
`

type UpdateProductRateByUserIdParams struct {
	UserID sql.NullInt64 `json:"user_id"`
	Rate   int16         `json:"rate"`
}

func (q *Queries) UpdateProductRateByUserId(ctx context.Context, arg UpdateProductRateByUserIdParams) (ProductRate, error) {
	row := q.db.QueryRowContext(ctx, updateProductRateByUserId, arg.UserID, arg.Rate)
	var i ProductRate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Rate,
	)
	return i, err
}
