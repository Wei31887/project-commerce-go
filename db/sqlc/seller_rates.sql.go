// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: seller_rates.sql

package sqlc

import (
	"context"
)

const createSellerRate = `-- name: CreateSellerRate :one
INSERT INTO seller_rates (
  user_id, rate
) VALUES (
  $1, $2
)
RETURNING id, user_id, rate
`

type CreateSellerRateParams struct {
	UserID int64 `json:"user_id"`
	Rate   int16 `json:"rate"`
}

func (q *Queries) CreateSellerRate(ctx context.Context, arg CreateSellerRateParams) (SellerRate, error) {
	row := q.db.QueryRowContext(ctx, createSellerRate, arg.UserID, arg.Rate)
	var i SellerRate
	err := row.Scan(&i.ID, &i.UserID, &i.Rate)
	return i, err
}

const deleteSellerRate = `-- name: DeleteSellerRate :exec
DELETE FROM seller_rates
WHERE id = $1
`

func (q *Queries) DeleteSellerRate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSellerRate, id)
	return err
}

const getSellerRateByUserId = `-- name: GetSellerRateByUserId :one
SELECT id, user_id, rate FROM seller_rates
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetSellerRateByUserId(ctx context.Context, userID int64) (SellerRate, error) {
	row := q.db.QueryRowContext(ctx, getSellerRateByUserId, userID)
	var i SellerRate
	err := row.Scan(&i.ID, &i.UserID, &i.Rate)
	return i, err
}

const updateSellerRate = `-- name: UpdateSellerRate :one
UPDATE seller_rates SET rate = $2
WHERE user_id = $1
RETURNING id, user_id, rate
`

type UpdateSellerRateParams struct {
	UserID int64 `json:"user_id"`
	Rate   int16 `json:"rate"`
}

func (q *Queries) UpdateSellerRate(ctx context.Context, arg UpdateSellerRateParams) (SellerRate, error) {
	row := q.db.QueryRowContext(ctx, updateSellerRate, arg.UserID, arg.Rate)
	var i SellerRate
	err := row.Scan(&i.ID, &i.UserID, &i.Rate)
	return i, err
}
