// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: order_items.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  order_id,
  count,
  product_id
) VALUES (
  $1, $2, $3
)
RETURNING id, order_id, count, product_id
`

type CreateOrderItemParams struct {
	OrderID   uuid.UUID `json:"order_id"`
	Count     int64     `json:"count"`
	ProductID int64     `json:"product_id"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem, arg.OrderID, arg.Count, arg.ProductID)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Count,
		&i.ProductID,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderItemByOrderId = `-- name: GetOrderItemByOrderId :one
SELECT id, order_id, count, product_id FROM order_items
WHERE order_id = $1 LIMIT 1
`

func (q *Queries) GetOrderItemByOrderId(ctx context.Context, orderID uuid.UUID) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItemByOrderId, orderID)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Count,
		&i.ProductID,
	)
	return i, err
}

const getOrderItemByProductId = `-- name: GetOrderItemByProductId :many
SELECT id, order_id, count, product_id FROM order_items
WHERE product_id = $1
`

func (q *Queries) GetOrderItemByProductId(ctx context.Context, productID int64) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemByProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Count,
			&i.ProductID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
