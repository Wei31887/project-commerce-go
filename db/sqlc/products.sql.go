// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: products.sql

package sqlc

import (
	"context"
	"time"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name,
  category_id,
  image,
  stock,
  sell,
  price,
  on_sell,
  description
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, name, category_id, image, stock, sell, price, on_sell, description, created_at, updated_at
`

type CreateProductParams struct {
	Name        string `json:"name"`
	CategoryID  int64  `json:"category_id"`
	Image       string `json:"image"`
	Stock       int64  `json:"stock"`
	Sell        int64  `json:"sell"`
	Price       string `json:"price"`
	OnSell      string `json:"on_sell"`
	Description string `json:"description"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.CategoryID,
		arg.Image,
		arg.Stock,
		arg.Sell,
		arg.Price,
		arg.OnSell,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CategoryID,
		&i.Image,
		&i.Stock,
		&i.Sell,
		&i.Price,
		&i.OnSell,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, category_id, image, stock, sell, price, on_sell, description, created_at, updated_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CategoryID,
		&i.Image,
		&i.Stock,
		&i.Sell,
		&i.Price,
		&i.OnSell,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHitProduct = `-- name: ListHitProduct :many
SELECT id, name, category_id, image, stock, sell, price, on_sell, description, created_at, updated_at FROM products
ORDER BY sell desc
LIMIT $1
`

func (q *Queries) ListHitProduct(ctx context.Context, limit int32) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listHitProduct, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CategoryID,
			&i.Image,
			&i.Stock,
			&i.Sell,
			&i.Price,
			&i.OnSell,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProduct = `-- name: ListProduct :many
SELECT id, name, category_id, image, stock, sell, price, on_sell, description, created_at, updated_at FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CategoryID,
			&i.Image,
			&i.Stock,
			&i.Sell,
			&i.Price,
			&i.OnSell,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductByType = `-- name: ListProductByType :many
SELECT id, name, category_id, image, stock, sell, price, on_sell, description, created_at, updated_at FROM products
WHERE category_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductByTypeParams struct {
	CategoryID int64 `json:"category_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListProductByType(ctx context.Context, arg ListProductByTypeParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductByType, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CategoryID,
			&i.Image,
			&i.Stock,
			&i.Sell,
			&i.Price,
			&i.OnSell,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET 
    name = $2,
    stock = $3,
    sell = $4,
    category_id = $5,
    price = $6,
    on_sell = $7,
    description = $8,
    updated_at = $9
WHERE id = $1
RETURNING id, name, category_id, image, stock, sell, price, on_sell, description, created_at, updated_at
`

type UpdateProductParams struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Stock       int64     `json:"stock"`
	Sell        int64     `json:"sell"`
	CategoryID  int64     `json:"category_id"`
	Price       string    `json:"price"`
	OnSell      string    `json:"on_sell"`
	Description string    `json:"description"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Stock,
		arg.Sell,
		arg.CategoryID,
		arg.Price,
		arg.OnSell,
		arg.Description,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CategoryID,
		&i.Image,
		&i.Stock,
		&i.Sell,
		&i.Price,
		&i.OnSell,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProductStockSell = `-- name: UpdateProductStockSell :one
UPDATE products SET 
    stock = stock + $3,
    sell = sell + $4,
    updated_at = $2
WHERE id = $1
RETURNING id, name, category_id, image, stock, sell, price, on_sell, description, created_at, updated_at
`

type UpdateProductStockSellParams struct {
	ID        int64     `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	Count     int64     `json:"count"`
	SellCount int64     `json:"sell_count"`
}

func (q *Queries) UpdateProductStockSell(ctx context.Context, arg UpdateProductStockSellParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductStockSell,
		arg.ID,
		arg.UpdatedAt,
		arg.Count,
		arg.SellCount,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CategoryID,
		&i.Image,
		&i.Stock,
		&i.Sell,
		&i.Price,
		&i.OnSell,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
