// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: comments.sql

package sqlc

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  user_id, product_id, content
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, product_id, content, status, created_at, updated_at
`

type CreateCommentParams struct {
	UserID    int64  `json:"user_id"`
	ProductID int64  `json:"product_id"`
	Content   string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.UserID, arg.ProductID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getCommentByProductId = `-- name: GetCommentByProductId :one
SELECT id, user_id, product_id, content, status, created_at, updated_at FROM comments
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetCommentByProductId(ctx context.Context, productID int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByProductId, productID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommentByUserId = `-- name: GetCommentByUserId :one
SELECT id, user_id, product_id, content, status, created_at, updated_at FROM comments
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetCommentByUserId(ctx context.Context, userID int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByUserId, userID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments SET 
    content = $2, updated_at = $3
WHERE id = $1
RETURNING id, user_id, product_id, content, status, created_at, updated_at
`

type UpdateCommentParams struct {
	ID        int64     `json:"id"`
	Content   string    `json:"content"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.ID, arg.Content, arg.UpdatedAt)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCommentStatus = `-- name: UpdateCommentStatus :exec
UPDATE comments SET 
    status = $2
WHERE id = $1
`

type UpdateCommentStatusParams struct {
	ID     int64 `json:"id"`
	Status int16 `json:"status"`
}

func (q *Queries) UpdateCommentStatus(ctx context.Context, arg UpdateCommentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateCommentStatus, arg.ID, arg.Status)
	return err
}
