// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user_delivers.sql

package sqlc

import (
	"context"
)

const createUserDeliver = `-- name: CreateUserDeliver :one
INSERT INTO user_delivers (
  user_id, address
) VALUES (
  $1, $2
)
RETURNING id, user_id, address
`

type CreateUserDeliverParams struct {
	UserID  int64  `json:"user_id"`
	Address string `json:"address"`
}

func (q *Queries) CreateUserDeliver(ctx context.Context, arg CreateUserDeliverParams) (UserDeliver, error) {
	row := q.db.QueryRowContext(ctx, createUserDeliver, arg.UserID, arg.Address)
	var i UserDeliver
	err := row.Scan(&i.ID, &i.UserID, &i.Address)
	return i, err
}

const deleteUserDeliver = `-- name: DeleteUserDeliver :exec
DELETE FROM user_delivers
WHERE id = $1
`

func (q *Queries) DeleteUserDeliver(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserDeliver, id)
	return err
}

const getUserDeliver = `-- name: GetUserDeliver :one
SELECT id, user_id, address FROM user_delivers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserDeliver(ctx context.Context, id int64) (UserDeliver, error) {
	row := q.db.QueryRowContext(ctx, getUserDeliver, id)
	var i UserDeliver
	err := row.Scan(&i.ID, &i.UserID, &i.Address)
	return i, err
}

const listUserDeliverByUserId = `-- name: ListUserDeliverByUserId :many
SELECT id, user_id, address FROM user_delivers
WHERE user_id = $1
ORDER BY user_id
`

func (q *Queries) ListUserDeliverByUserId(ctx context.Context, userID int64) ([]UserDeliver, error) {
	rows, err := q.db.QueryContext(ctx, listUserDeliverByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserDeliver{}
	for rows.Next() {
		var i UserDeliver
		if err := rows.Scan(&i.ID, &i.UserID, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDeliver = `-- name: UpdateUserDeliver :one
UPDATE user_delivers SET 
  address = $2
WHERE id = $1
RETURNING id, user_id, address
`

type UpdateUserDeliverParams struct {
	ID      int64  `json:"id"`
	Address string `json:"address"`
}

func (q *Queries) UpdateUserDeliver(ctx context.Context, arg UpdateUserDeliverParams) (UserDeliver, error) {
	row := q.db.QueryRowContext(ctx, updateUserDeliver, arg.ID, arg.Address)
	var i UserDeliver
	err := row.Scan(&i.ID, &i.UserID, &i.Address)
	return i, err
}
